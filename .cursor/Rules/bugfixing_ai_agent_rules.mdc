---
description: 
globs: 
alwaysApply: false
---
{
  "context": "bugfix",
  "description": "Полные и детализированные правила для ИИ-агента по процессу багфиксинга. Включает лучшие практики, технические рекомендации и стандарты, чтобы обеспечить надежное, воспроизводимое и качественное исправление ошибок.",

  "generalPrinciples": {
    "priority": "Исправлять баги по приоритету: критичные (критический функционал/безопасность) > важные (основной функционал) > мелкие (UI, производительность).",
    "isolation": "Каждый багфикс должен быть изолирован в отдельной ветке/задаче, чтобы минимизировать риски регрессии.",
    "reproducibility": "Перед началом исправления необходимо воспроизвести баг с подробным описанием шагов и условиями.",
    "rootCauseAnalysis": "Обязательно проводить анализ коренной причины (root cause), избегать поверхностных патчей.",
    "codeReview": "Любые изменения должны проходить обязательный код-ревью с участием другого ИИ-агента или человека.",
    "тестирование": "После исправления багов писать или обновлять автоматические тесты, покрывающие сценарий ошибки.",
    "документирование": "В комментариях к коду и в задаче подробно описывать суть багфикса и причины возникновения ошибки.",
    "регрессия": "Обязательно проверять, что исправление не вызвало регрессий во всех связанных модулях.",
    "логирование": "Добавлять или улучшать логирование вокруг проблемных мест для последующего анализа.",
    "цикличность": "Проверять, была ли эта ошибка недавно, не ли зацикленности в последних итерациях исправления ошибки."
  },

  "codeStandards": "Использовать .cursor\Rules\develop_ai_agent_rules.txt",

  "testing": {
    "unitTests": {
      "requirement": "Покрытие исправленных функций юнит-тестами обязательно.",
      "coverageThreshold": 90,
      "naming": "Тесты должны иметь описательные названия, отражающие исправляемый кейс."
    },
    "integrationTests": {
      "requirement": "Если баг затрагивает несколько компонентов — написать интеграционные тесты.",
      "mocking": "Использовать моки и стабсы для изоляции тестируемых модулей."
    },
    "regressionTests": {
      "создание": "Добавлять регрессионные тесты для предотвращения повторного возникновения багов.",
      "автоматизация": "Все тесты должны запускаться в CI/CD и выдавать отчет по покрытию."
    }
  },

  "workflow": {
    "issueTracking": {
      "связь": "Каждый багфикс обязан быть привязан к Issue/Ticket/Task с четким описанием и статусом.",
      "комментарии": "В процессе работы вести детальные комментарии с прогрессом."
    },
    "branching": {
      "правила": "Исправления делать в отдельных ветках с именованием bugfix/<issue-number>_<краткое-описание>.",
      "слияние": "После прохождения тестов — сливать ветку через pull request с обязательным ревью."
    },
    "deployment": {
      "этапы": "Выпускать багфиксы поэтапно: dev → staging → production с валидацией на каждом этапе.",
      "мониторинг": "После деплоя следить за логами и метриками на предмет повторных ошибок."
    }
  },

  "loggingAndMonitoring": {
    "логирование": "Улучшать и стандартизировать логи: использовать уровни (error, warn, info, debug).",
    "ошибки": "Обрабатывать ошибки централизованно, избегать 'поглощения' исключений без логов.",
    "метрики": "Внедрять метрики для отслеживания частоты и времени исправления багов."
  },

  "toolsAndPractices": {
    "статическийанализ": "Использовать статический анализ кода (SonarQube, ESLint) для обнаружения потенциальных проблем.",
    "отладка": "Применять пошаговую отладку, профайлеры и трассировку для глубокого анализа ошибок.",
    "codeCoverageTools": "Интегрировать инструменты анализа покрытия кода (Istanbul, Jacoco и др.).",
    "CI/CD": "Автоматизировать тестирование и деплой багфиксов с помощью CI/CD (GitHub Actions, Jenkins ...)."
  },

  "securityConsiderations": {
    "валидация": "Всегда проверять входные данные, предотвращать SQL-инъекции, XSS и пр.",
    "авторизация": "Исправления не должны нарушать политику доступа и авторизации.",
    "обновления": "В случае уязвимостей — проверять версии библиотек и обновлять зависимости."
  },

  "exampleCommands": {
    "createBranch": "git checkout -b bugfix/123_fix-login-error",
    "runTests": "npm run test -- --coverage",
    "staticAnalysis": "eslint src/ --fix",
    "commit": "git commit -m \"bugfix(123): исправлена ошибка логина при неверном пароле\"",
    "pushAndPR": "git push origin bugfix/123_fix-login-error и создать Pull Request"
  },

  "notes": [
    "Если баг связан с производительностью, отдельно оформлять оптимизационные задачи.",
    "Для сложных багов создавать отдельный spike/исследовательскую задачу.",
    "В случае сомнений всегда уточнять в issue tracker и вести коммуникацию."
  ]
}
